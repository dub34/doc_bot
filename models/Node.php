<?php
/**
 * Created by PhpStorm.
 * User: victor
 * Date: 19.09.16
 * Time: 21:38
 */

namespace app\models;


use himiklab\yii2\search\behaviors\SearchBehavior;
use yii\helpers\ArrayHelper;

class Node extends \app\models\generated\Node
{
    public $question;
    public $foundNodes = [];
    public $negativeAnsweredNodes = [];

    public function rules()
    {
        $rules = parent::rules();

        return ArrayHelper::merge($rules, [
            ['question', 'string']
        ]);
    }

    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['search'] = [
            'class' => SearchBehavior::className(),
//                'searchScope' => function ($model) {
            /** @var \yii\db\ActiveQuery $model */
//            $model->select(['keywords']);
//                },
            'searchFields' => function ($model) {
                /** @var self $model */
                return [
                    ['name' => 'node_id', 'value' => $model->id, SearchBehavior::FIELD_KEYWORD],
                    ['name' => 'tag', 'value' => strip_tags($model->tag), SearchBehavior::FIELD_TEXT],
                    ['name' => 'lvl', 'value' => $model->lvl, SearchBehavior::FIELD_KEYWORD],
                    ['name' => 'root', 'value' => $model->root, SearchBehavior::FIELD_KEYWORD],
                    ['name' => 'name', 'value' => $model->name, SearchBehavior::FIELD_TEXT],
//                    ['name' => 'parent', 'value' => ArrayHelper::getValue($model->parents(1)->one(), 'id'), SearchBehavior::FIELD_KEYWORD]
                ];
            }
        ];
        return $behaviors;
    }

    public function afterSave($insert, $changedAttributes)
    {
        $question = $this->getQuestionModel();
        $question->text = $this->question;
        $question->save();

        $search = \Yii::$app->search;
        $search->index();
        parent::afterSave($insert, $changedAttributes);
    }

    public function afterFind()
    {
        $this->question = ArrayHelper::getValue($this->getQuestionModel(), 'text');

        parent::afterFind(); // TODO: Change the autogenerated stub
    }

    protected function getQuestionModel()
    {
        $question = Question::findOne(['node_id' => $this->id]);
        if (null == $question) {
            $question = new Question([
                'node_id' => $this->id
            ]);
        }
        return $question;
    }

}